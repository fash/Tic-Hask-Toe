-- Higher Order Functions 


-- Anonymous Functions(Lamda Expression & Operation sections)
-- Predicates
-- Dim function 
-- Folds (to main variations foldr & foldl) takes a list and repeatedly applies a binaray function to it reducing it into an accumulated value also known as reduce in other languages
-- The accumulated value can be anything .
-- Aggregate it into some summary valuue 
--For loops are the same as foldr/foldl(accumulator is on the right for foldr and on the left for foldl)
--Inductive and Iterative Recursion
--zipWith behaves like zip but instead of tupling the elements of the liusts, it applies a provided binary function

-- Apply & Compose: ($) apply and (.) called compose 


-- compose takes two functions and merges them into a new function. composition goes from right to left. The right will be first composed then merged --into the left and gives us a new function allowing us to join functions together.

-- apply abstracts ordinary function application into its own higher order funjction. 
-- its left argument can be any function (a -> b )
-- its right argument can be any expression whose ultimate value matches the type of that functions expected input (a). Basically allowing us to write --less/replace parenthesis()

-- Apply example
--criteria = [knowsLangs[Haskell,TypeScript], hasYrsExp 2,inCountry USA]
--screenCandidate c = and (map ($ c) criteria)

-- Composition syntax
-- .nub removes the duplicate elements of the list
-- isAlpha checks if it is uppercase or lowercase , is Alphabet

-- pangram txt = (==26) $length $nub $ map toLower $ filter isAlpha txt

reverse_ :: [a] -> [a]  --  take a list of any type and return a list of any type in reverse
reverse_ xs = foldr _ [] xs
reverse_ xs =foldl (/acc x -> x : acc) [] xs

-- IO Context

--IO is contagious : pure data that mixes with IO Data becomes IO data
--Expressions that produce IO values are called actions
--Haskell ensures total segregation of pure and impure expressions, this is achieve through a special one-way type context called IO


-- SEQUENCE (>>)


-- BIND (>>=)
-- Allows us to sequence actions but is even more powerful
(>>=) :: IO a -> (a -> IO b) -> IO b
myAction :: a -> IO b


Pure input - Bindable action - IO result 

--boundAction :: IO a - IO b
--boundAction = (>>= myAction) -- partially applying bind to an action lets it accept an IO value so we can apply it to the result of a previous action


-- RETURN

-- We cant bind pure functions with actions directly , only actions can be composed with (>>=)
-- To apply pure functions to impure data, we can convert them into bindable actions by composing them with the return function

--myPureFunc :: a -> b
--return :: a -> IO a

--myAction :: a -> IO b
--myAction = return . myPureFunc

-- do Notation 
-- alt syntax for monadic code (computation in a context)
-- While emulating imperative style, do notation to pure function expressions composed using (>>), (>>=) and nested lamdas
-- like (>>),(>>=) and return do is not specific to IO 
-- we should understand how to code without do before adopting it

greetTrainer :: IO ()
greetTrainer =
putStrLn "Enter your name: " >>
getLine >> = (/name -> putStrLn $ "Ohayou, "++ name ++ "!")

--WithDO 

greetTrainer :: IO ()
greetTrainer = do
putStrLn "Enter your name: " 
getLine >> = (/name -> putStrLn $ "Ohayou, "++ name ++ "!")


-- Let

The let keyword can be used inside do blocks to assign intermediate variable to the results of pure calculations

leapChecker :: IO ()


-- Nested do Blocks

nestedDo = do
putStrLn "Enable debug mode? (y/n)"
c <- getChar
if c == 'y'
then do
putStrLn "Debug mode enabled."

...

else do 
putStrLn "Debug mode disabled"

...

-- 02/02/23
-- Accessing field values 
-- Selctors provide us built-in getter functions for every field so we do not need to define them ourselves
-- To retrieve a field value we just apply the selector to a record value

:t getId
getId :: PokedxEntry -> Int
getId alakazum
26
getName alakazum
"Alakazum"

-- Field replacement
-- The selector syntax also makes it trivial to replace field values 
--To make a modified copy of a record we write the name of the original record forllwed by curly braces with the field selector and its new value
alakazumSilver = alakazum {getDescription = "This is a test description"}

-- Every unmentioned field will retain its original valueWe can also replace multiple field values simulteneously 

--Contructing Large records
--data PokedxEntry = PokedxEntr Int String String Float Float String


--Polymorphic containers

---Records can be polymorphic serving as general containers that can hold data of any type in their fields
--Polymorphic fields in a record are defined using type param : arbitrary lowercase names that typically are a single letter

-- Typeclasses : What are they?
--Typeclasses are collections of overloaded behaviours that types can implement via instances
--Overloaded means different types implemtnt the same behaviors in distinct ways on an adhoc basis
--These behaviors may consist of 
-- Methods : class-specific function like (==) for Eq or Show which will convert a value to a strint
--Properties : class-specific constanct like minBound or maxBound or Bounded
--Each typeclass has some minimal subset of bahviours that must be implemented to define an instances
--Satisfying this requirement often provides additional functionality for free making typeclasses powerful

--Classes as constraints
-- Typeclasses also provide a means of constraining polymorphic functions i.e. Limiting the types of data a function can operate onParadoxically , constraining polymorphism actually expands the utility of a function

--Polymorphic functions also happens to do the least : it's called the identity function (:: a -> a) and can do nothing besides return the same value as its input

-- Manual instances-- Instance ... Class ... Type ... Where 

-- if we derive a show instance for our PokedxEntry record, values will print like this in GHCi
--....
--..... check presentation on LMS ...
-- Maybe context 
-- Either context 
-- data Either e a = Left e ] Right a



Q3 Write the following two functions : 
--isDigit will take a character as input and return a boolean value
--Construct a list of characters from 0 to 9 using range syntax
-- Use elem with your range to return the appropriate boolean value

isDigit :: Char -> Bool
isDigit c = elem c ['0' .. '9']


--readDigit takes a character value and returns the corresponding Int value if it is a valid digit. if a non-digit character is given , return -1 as a default value

readDigit :: Char -> Int
readDigit c = if isDigit c then read [c] else -1 

--Q4  Use replicate with the size constant and the constructor you defined for an empty square in Assignment 1 to declare two new constanct _EMPTY_ROW_ and _EMPTY_BOARD_
-- USE _EMPTY_ROW_ in the definition of _EMPTY_BOARD_
_EMPTY_ROW_ :: Row
 _EMPTY_ROW_ = replicate_SIZE_ E

 _EMPTY_BOARD_ :: Board
_EMPTY_BOARD_ = replicate_SIZE_EMPTY_ROW_

--Q5 
isTied :: Board -> Bool
isTied b = all(/=E) (concat b)

---- FUNCTOR -------


-- Overloaded Adapters


-- Maybe
Instance Functor' Where fmap :: (a -> b) -> Maybe' a -> Maybe' b
fmap f(Just' x) = Just' (f x)
fmap _Nothing' = Nothing'

-- Either 
Instance Functor 


-- Applicative Functor  ----
-- Mapping higher-arity Functions 
: fmap
: Maybe

--- Pure ---
:monads
:IO
:return
Any where u can use return u can use monads but not the other way

Maybe Monad 
safeDiv :: Int -> Int -> Maybe IntsafeDiv x y = if y /= 0 then Just $ x 'div' y else Nothing

safeSqrt :: Int -> Maybe Float
safeSqrt x = if x >=0 then Just . sqrt $ fromIntegral x else Nothing


-- *** INSTRUCTIONS: *** --
  -- Open your TicHaskToe repository in Gitpod
  -- Create a file `State.hs` in the `solutions` directory and paste the code below.
  -- Open the `TicHaskToe.cabal` file in the root directory,
    -- find the `executable TicHaskToe` stanza,and make the following changes:
      -- 1. Add `, State` below `, A5` in the `other-modules:` section
      -- 2. Add `, mtl` below `, random` in the `build-depends:` section
  -- To test the code:
    -- 1. Run `cabal repl` in the terminal and then `:l State`
    -- 2. Enter `randomGame`

-- ignore some linter suggestions:
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Use tuple-section" #-}
{-# HLINT ignore "Eta reduce" #-}

module State where

import A1
import A2
import A4
import A5

import System.Random (StdGen, randomR, newStdGen)
import Control.Monad.State

-- define a record type to hold the state
data Game = Game {
    activePlayer :: Player
  , status       :: GameState
  , board        :: Board
  , generator    :: StdGen
  }

-- create an initial Game value using a random generator
initialState :: StdGen -> Game
initialState gen = Game {
    activePlayer = X
  , status       = Playing
  , board        = _EMPTY_BOARD_
  , generator    = gen
  }

-- game loop
playGame :: State Game ()
playGame = do
  Game ap _ b gen <- get
  let opens      = getOpenMoves b
      (i, gen')  = randomR (0, length opens - 1) gen
      move       = opens !! i
      (stat, b') = playMove ap b move
  -- update the state
  put $ Game { activePlayer = switchPlayer ap
             , status       = stat
             , board        = b'
             , generator    = gen'
             }
  -- play again if game isn't over (otherwise return ())
  when (stat == Playing) playGame

randomGame :: IO ()
randomGame = do
  game <- initialState <$> newStdGen -- get a random generator and create initial game state
  let (_, game') = runState playGame game -- call runner to get handler and apply it to initial state
  -- display result
  printBoard $ board game'
  putStrLn . showGameState $ status game'

-- *** HELPERS TO IDENTIFY INDICES OF OPEN SQUARES *** --
getOpenMoves :: Board -> [Move]
getOpenMoves b = concat $ go 0 [] b
  where
    go _ ms []     = ms
    go i ms (r:rs) = go (i + 1) (map (\j -> (i, j)) (getOpenSquares r) : ms) rs

getOpenSquares :: Row -> [Int]
getOpenSquares r = go 0 [] r
  where
    go _ os []       = os
    go j os (sq:sqs)
      | sq == E      = go (j + 1) (j:os) sqs
      | otherwise    = go (j + 1) os     sqs